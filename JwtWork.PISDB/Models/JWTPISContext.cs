// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;

namespace JwtWork.PISDB.Models;

public partial class JWTPISContext : DbContext
{
    IHostEnvironment _env;
    public JWTPISContext(DbContextOptions<JWTPISContext> options, IHostEnvironment env)
        : base(options)
    {
        _env = env;
    }

    public virtual DbSet<FileCategory> FileCategory { get; set; }

    public virtual DbSet<FileSubCategory> FileSubCategory { get; set; }

    public virtual DbSet<PSItem> PSItem { get; set; }

    public virtual DbSet<PSItemLink> PSItemLink { get; set; }

    public virtual DbSet<PSJob> PSJob { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {


        base.OnConfiguring(optionsBuilder);
        IConfigurationRoot configuration = null;

        if (!_env.IsProduction())
        {
            configuration = new ConfigurationBuilder()
                                .SetBasePath(Directory.GetCurrentDirectory())
                                .AddJsonFile(@Directory.GetCurrentDirectory() + "/../JwtWork/appsettings.json")
                                .Build();
        }
        else
        {
            configuration = new ConfigurationBuilder()
                                .SetBasePath(Directory.GetCurrentDirectory())
                                .AddJsonFile(@Directory.GetCurrentDirectory() + "/appsettings.json", optional: false, reloadOnChange: true)
                                .AddJsonFile(@Directory.GetCurrentDirectory() + $"/appsettings.{_env.EnvironmentName}.json", optional: true)
                                .Build();
        }

        var builder = new DbContextOptionsBuilder<JWTPISContext>();
        var connectionString = configuration.GetConnectionString("jwtPISDB");
        optionsBuilder.UseSqlServer(connectionString);

    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<FileSubCategory>(entity =>
        {
            entity.HasOne(d => d.FileCategory).WithMany(p => p.FileSubCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FileSubCategory_FileCategory");
        });

        modelBuilder.Entity<PSItem>(entity =>
        {
            entity.HasOne(d => d.PSJob).WithMany(p => p.PSItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSItem_PSJob");
        });

        modelBuilder.Entity<PSItemLink>(entity =>
        {
            entity.HasOne(d => d.FileCategory).WithMany(p => p.PSItemLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSItemLink_FileCategory");

            entity.HasOne(d => d.FileSubCategory).WithMany(p => p.PSItemLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSItemLink_FileSubCategory");

            entity.HasOne(d => d.PSItem).WithMany(p => p.PSItemLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSItemLink_PSItem");
        });

        modelBuilder.Entity<PSJob>(entity =>
        {
            entity.Property(e => e.CompleteYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.MeterSpanLen).HasDefaultValueSql("((0))");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<JWTPISContext>
{
    IHostEnvironment _env;

    public DesignTimeDbContextFactory(IHostEnvironment env)
    {
        _env = env;

    }
    public JWTPISContext CreateDbContext(string[] args)
    {
        IConfigurationRoot configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile(@Directory.GetCurrentDirectory() + "/../JwtWork/appsettings.json")
            .Build();
        var builder = new DbContextOptionsBuilder<JWTPISContext>();
        var connectionString = configuration.GetConnectionString("jwtPISDB");
        builder.UseSqlServer(connectionString, opt => opt.MigrationsAssembly("JwtWork.PISDB"));
        return new JWTPISContext(builder.Options, _env);

    }
}