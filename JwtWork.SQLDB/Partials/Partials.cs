using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static JwtWork.Abstraction.Interfaces;

namespace JwtWork.SQLDB.Models
{


    public partial class UserTB: IUser
    {

    }

    public partial class JWTWORKContext
    {

        IHostEnvironment _env;

        public JWTWORKContext(DbContextOptions<JWTWORKContext> options, IHostEnvironment env)
            : base(options)
        {
            _env = env;
        }
        // Please remove the onconfiguring function from the dbcontext generated by reverse engineer
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            /*
    => optionsBuilder.UseSqlServer("Data Source=10.23.80.21;Initial Catalog=JWTWORK;Persist Security Info=True;User ID=stds;Password=P@ssw0rd;Trust Server Certificate=True;Command Timeout=300");         
             */

            base.OnConfiguring(optionsBuilder);
            IConfigurationRoot configuration = null;

            if (_env == null|| !_env.IsProduction())
            {
                configuration = new ConfigurationBuilder()
                                    .SetBasePath(Directory.GetCurrentDirectory())
                                    .AddJsonFile(@Directory.GetCurrentDirectory() + "/../JwtWork/appsettings.json")
                                    .Build();
            }
            else
            {
                configuration = new ConfigurationBuilder()
                                    .SetBasePath(Directory.GetCurrentDirectory())
                                    .AddJsonFile(@Directory.GetCurrentDirectory() + "/appsettings.json", optional: false, reloadOnChange: true)
                                    .AddJsonFile(@Directory.GetCurrentDirectory() + $"/appsettings.{_env.EnvironmentName}.json", optional: true)
                                    .Build();
            }

            var builder = new DbContextOptionsBuilder<JWTWORKContext>();
            var connectionString = configuration.GetConnectionString("jwtSQLDB");
            optionsBuilder.UseSqlServer(connectionString);

        }
    }
}
